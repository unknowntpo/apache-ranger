name: Publish Docker Image

on:
  workflow_dispatch:
    # inputs:
    #   image:
    #     type: choice
    #     description: 'Choose the image to build'
    #     required: true
    #     default: 'gravitino'
    #     options:
    #       - 'gravitino'
    #       - 'gravitino-ci-hive'
    #       - 'gravitino-ci-kerberos-hive'
    #       - 'gravitino-ci-trino'
    #       - 'gravitino-ci-doris'
    #       - 'gravitino-ci-ranger'
    #       - 'trino'
    #       - 'hive'
    #       - 'ranger'
    #   # tag:
    #   #   description: 'Docker tag to apply to this image'
    #   #   required: true
    #   #   type: string
    #   token:
    #     description: 'Publish Docker token'
    #     required: true
    #     type: string

jobs:
  build-and-publish-ranger-release:
    runs-on: ubuntu-latest
    # defaults:
    #   run:
    #     working-directory: $HOME/repo

    timeout-minutes: 120
    env:
      input_token: ${{ github.event.inputs.token }}
      secrets_token: ${{ secrets.PUBLISH_DOCKER_TOKEN }}
    steps:
      - uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose
      - name: Build and run Docker Compose
        run: |
          cd dev-support/ranger-docker

          # peek users
          cat /etc/passwd

          # grant permission because docker-compose will mount on .m2
          sudo mkdir -p $HOME/ranger/.m2/repository
          #chown -R ranger:ranger $HOME/ranger/.m2

          # set some env
          export DOCKER_BUILDKIT=1
          export COMPOSE_DOCKER_CLI_BUILD=1
          export RANGER_DB_TYPE=mysql

          # start building jar files
          docker-compose -f docker-compose.ranger-base.yml -f docker-compose.ranger-build.yml up
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.sha }}
          release_name: "Release ${{ github.sha }}"
          body: "Automated release for commit ${{ github.sha }}"
          draft: false
          prerelease: false

      - name: Upload Release Assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./dist/*
          asset_name: $(basename ${{ runner.path }})
          asset_content_type: application/octet-stream
      # - uses: actions/setup-java@v3
      #   with:
      #     java-version: '8'
      #     distribution: 'temurin'

      # - name: Build and Push the Docker image
      #   run: sudo rm -rf /usr/local/lib/android && sudo rm -rf /opt/hostedtoolcache/CodeQL && ./dev/docker/build-docker.sh --platform all --type ${image_type} --image ${image_name} --tag ${{ github.event.inputs.tag }} --latest
